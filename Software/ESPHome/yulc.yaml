substitutions:
  name: yulc
  friendly_name: yulc
  project_name: aae.yulc
  project_version: '1.0'

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0
  name_add_mac_suffix: false
  platformio_options:
    board_build.flash_mode: dio
  project:
    name: ${project_name}
    version: ${project_version}

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino
    version: latest

psram:
  mode: quad
  speed: 80MHz

# Enable logging
logger:

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:
- platform: esphome

# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  # Set up a wifi access point
  ap: {}

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
captive_portal:

dashboard_import:
  package_import_url: github://ale1800/YULC/Software/ESPHome/yulc.yaml@main
  import_full_config: true

# Sets up Bluetooth LE (Only on ESP32) to allow the user
# to provision wifi credentials to the device.
esp32_improv:
  authorizer: none

# To have a "next url" for improv serial
web_server:

# Set up two addressable strips on pin GPIO1 and GPIO2
# If you want to use them, adjust the rgb_order, chipset, num_leds and name.
# On turn_on and turn_off they are already switched by the respective mosfet, ensuring no data transmission while power supply is disconnected 
light:
  - platform: fastled_clockless
    rgb_order: GRB
    chipset: WS2811
    pin: GPIO1
    num_leds: 60
    name: "Strip 1"
    id: strip_1_light
    on_turn_on:
      then:
        - output.turn_on: gpio_47
        - delay: 500ms
        - light.turn_on: strip_1_light
    on_turn_off:
      then:
        - light.turn_off: strip_1_light
        - delay: 500ms
        - output.turn_off: gpio_47
  - platform: fastled_clockless
    rgb_order: GRB
    chipset: WS2811
    pin: GPIO2
    num_leds: 40
    name: "Strip 2"
    id: strip_2_light
    on_turn_on:
      then:
        - output.turn_on: gpio_21
        - delay: 500ms
        - light.turn_on: strip_2_light
    on_turn_off:
      then:
        - light.turn_off: strip_2_light
        - delay: 500ms
        - output.turn_off: gpio_21

# Monitoring internal S3 temperaure sensor every 10s, in order to turn off both mosfet when the temperature rises above 70Â°C.
sensor:
  - platform: internal_temperature
    name: "Internal Temperature"
    update_interval: 10s
    id: internal_temp
    on_value:
      then:
        - if:
            condition:
              sensor.in_range:
                id: internal_temp
                above: 70
            then:
              - light.turn_off: strip_1_light
              - light.turn_off: strip_2_light
              - delay: 500ms
              - output.turn_off: gpio_47
              - output.turn_off: gpio_21
              
# Monitoring of voltage that is present on the terminal block, so likely the voltage that the strip is receiving (excluding voltage drobs at the end of the strip cable). If it drops below 1V, you'll se a "BLOWN FUSE" text in the web ui.
# It means a short-circuit or the fuse is not installed
  - platform: adc
    pin: GPIO7
    name: "Fuse Voltage"
    id: fuse_voltage
    update_interval: 1s
    filters:
      - multiply: 7.6
    on_value:
      then:
        - if:
            condition:
              lambda: 'return id(fuse_voltage).state < 1.0;'
            then:
              - logger.log: "BLOWN FUSE"
              - text_sensor.template.publish:
                  id: fuse_status
                  state: "BLOWN FUSE"
            else:
              - text_sensor.template.publish:
                  id: fuse_status
                  state: "Fuse OK"

output:
  - platform: gpio
    pin: 47
    id: gpio_47
  - platform: gpio
    pin: 21
    id: gpio_21

text_sensor:
  - platform: template
    name: "Fuse Status"
    id: fuse_status
